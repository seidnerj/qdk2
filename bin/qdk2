#!/usr/bin/env python3

from argparse import ArgumentParser, RawTextHelpFormatter
from os.path import (join as pjoin,
                     dirname as pdirname,
                     abspath as pabspath,
                     )
import sys
import logging

if sys.argv[0].startswith('/usr'):
    prefix = '/usr/share/qdk2'
else:
    prefix = pdirname(pdirname(pabspath(sys.argv[0])))
sys.path.append(pjoin(prefix, 'python'))


from log import LoggingConfiguration
from settings import Settings
from qdk2.imports import CommandImport
from qdk2.create import CommandCreate
from qdk2.build import CommandBuild
#from qdk2.clean import CommandClean
from qdk2.info import CommandInfo
from qdk2.edit import CommandEdit
from qdk2.changelog import CommandChangelog
from qdk2.extract import CommandExtract
#from qdk2.doctor import CommandDoctor
from qdk2.version import CommandVersion
# from lint import CommandLint


LoggingConfiguration.set(logging.DEBUG if Settings.DEBUG else logging.INFO)
Commands = (CommandImport,
            CommandCreate,
            CommandBuild,
            #CommandClean,
            CommandInfo,
            CommandEdit,
            CommandChangelog,
            CommandExtract,
            #CommandDoctor,
            CommandVersion,
            # CommandLint,
            )


class MyArgumentParser(object):
    """Command-line argument parser
    """
    def __init__(self):
        """Create parser object
        """
        description = ('Assist to create and build QPKG'
                       '')
        epilog = ('',
                  '',)
        parser = ArgumentParser(description=description,
                                epilog='\n'.join(epilog),
                                formatter_class=RawTextHelpFormatter)
        parser.add_argument('-v', '--verbose', action='store_true',
                            default=False, help='verbose')
        subparsers = parser.add_subparsers(help='')

        for c in Commands:
            c.build_argparse(subparsers)

        self.parser = parser

    def parse(self):
        """Parse command-line arguments
        """
        args, extra_args = self.parser.parse_known_args()

        return args, extra_args


def main():
    args, extra_args = MyArgumentParser().parse()
    for c in Commands:
        if c.key in args:
            c(args, extra_args).run()
            break


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass


# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
